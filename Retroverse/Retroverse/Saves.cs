using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Serialization;

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Storage;

namespace Retroverse
{
    public class SaveGame
    {
        [XmlIgnore]
        public string filename; //used for deleting this save

        public DateTime time; //used for sorting
        public int numPlayers;
        public HeroSaveState[] heroStates;
        public int levelX;
        public int levelY;
        public int cellOffset1;
        public int cellOffset2;
        public int score;
        public int AvailableGems;
        public int AvailableSand;
        public int AvailableBombs;
        public InventorySaveState inventoryState;
        public string[] storePowerupTypeNames;
        public int healthCost;
        public int reviveCost;
    }

    public class BindingSave
    {
        public InputAction action;
        public Keys key;
        public Buttons button;

        public static List<BindingSave> fromBindingList(List<Bindings.Binding> bindingList)
        {
            List<BindingSave> ret = new List<BindingSave>();
            if (bindingList != null)
                foreach (Bindings.Binding bind in bindingList)
                    ret.Add(new BindingSave { action = bind.Action, key = bind.Key, button = bind.Button });
            return ret;
        }

        public static List<Bindings.Binding> toBindingList(List<BindingSave> bindingSaves)
        {
            List<Bindings.Binding> ret = new List<Bindings.Binding>();
            if (bindingSaves != null)
                foreach (BindingSave bindSave in bindingSaves)
                ret.Add(new Bindings.Binding(bindSave.action, bindSave.key, bindSave.button));
            return ret;
        }
    }

    public class BindingsSave
    {
        public List<BindingSave> bindings1;
        public List<BindingSave> bindings2;
        public bool[] useCustom = new bool[2];

        public static BindingsSave NewSave()
        {
            return new BindingsSave //newfangled C# object initializer thingy
            {
                bindings1 = BindingSave.fromBindingList(Bindings.CUSTOM_BINDINGS[PlayerIndex.One]),
                bindings2 = BindingSave.fromBindingList(Bindings.CUSTOM_BINDINGS[PlayerIndex.Two]),
                useCustom = new bool[] { Bindings.USE_CUSTOM_BINDINGS[PlayerIndex.One], Bindings.USE_CUSTOM_BINDINGS[PlayerIndex.Two] },
            };
        }

        public void apply()
        {
            Bindings.Load(new Dictionary<PlayerIndex, List<Bindings.Binding>>()
            {
                {PlayerIndex.One, (bindings1 != null && bindings1.Count > 0) ? BindingSave.toBindingList(bindings1) : null},
                {PlayerIndex.Two, (bindings2 != null && bindings2.Count > 0) ? BindingSave.toBindingList(bindings2) : null},
            });
            Bindings.USE_CUSTOM_BINDINGS[PlayerIndex.One] = useCustom[0];
            Bindings.USE_CUSTOM_BINDINGS[PlayerIndex.Two] = useCustom[1];
        }
    }

    public class ConfigSave
    {
        public string WARNING = "DO NOT EDIT THIS FILE";
        public ScreenSize screenSize;
        public float masterVolume;
        public float musicVolume;
        public float soundVolume;
        public string WARNING2 = "YO I'M SERIOUS GET OUT OF HERE";
        public List<HeroHighscore> highscoresSolo;
        public List<HeroHighscoreCoop> highscoresCoop;
        public string WARNING3 = "ALRIGHT YOU GOT TO THE END NOW CLOSE THE DAMN FILE";

        public static ConfigSave NewSave()
        {
            return new ConfigSave //newfangled C# object initializer thingy
                {
                    screenSize = RetroGame.currentScreenSizeMode,
                    masterVolume = SoundManager.MasterVolume,
                    musicVolume = SoundManager.MusicMasterVolume,
                    soundVolume = SoundManager.SoundMasterVolume,
                    highscoresSolo = Highscores.SOLO,
                    highscoresCoop = Highscores.COOP,
                };
        }

        public void apply()
        {
            RetroGame.SetScreenSize(screenSize);
            SoundManager.SetMasterVolume(masterVolume);
            SoundManager.SetMusicMasterVolume(musicVolume);
            SoundManager.SetSoundMasterVolume(soundVolume);
            if (highscoresSolo != null)
                Highscores.SOLO = highscoresSolo;
            if (highscoresCoop != null)
                Highscores.COOP = highscoresCoop;
            Highscores.Save();
        }
    }

    public struct ConfigAndBindings
    {
        public ConfigSave config;
        public BindingsSave bindings;
    }

    public static class Saves
    {
        public const string NEW_GAME = null;
        public static readonly Type[] EXTRA_TYPES = new Type[] { typeof(HeroSaveState), typeof(InventorySaveState), typeof(PowerupTypeList), typeof(PrisonerInfo), typeof(Bindings.Binding), typeof(DateTime), typeof(HeroHighscore), typeof(HeroHighscoreCoop) };

        public static StorageDevice Device;
        public const string CONTAINER_NAME = "RetroverseStorage";
        public const string EXT = ".retrosav";
        public const string CONFIG_NAME = "config";
        public const string BINDINGS_FULL_NAME = "custom.bindings";
        public static string LastSaveFilename { get; set; }
        public static StorageDevice LastUsedDevice { get; private set; }
        private static string filenameToSave;
        private static Object dataToSave;
        private static string filenameToLoad;
        private static Type returnType;
        private static Object saveDataToReturn;
        private static List<SaveGame> allSaves;

        private static readonly XmlSerializer SAVE_GAME_SERIALIZER = new XmlSerializer(typeof(SaveGame), EXTRA_TYPES);
        private static readonly XmlSerializer CONFIG_SAVE_SERIALIZER = new XmlSerializer(typeof(ConfigSave), EXTRA_TYPES);
        private static readonly XmlSerializer BINDINGS_SAVE_SERIALIZER = new XmlSerializer(typeof(BindingsSave), EXTRA_TYPES);

        public static void Reset()
        {
            LastSaveFilename = null;
            LastUsedDevice = null;
        }
        
        public static void InitiateConfigSave()
        {
            Device = null;

            filenameToSave = CONFIG_NAME + EXT;
            dataToSave = ConfigSave.NewSave();
            StorageDevice.BeginShowSelector(SaveToDevice, null);
            filenameToSave = BINDINGS_FULL_NAME;
            dataToSave = BindingsSave.NewSave();
            StorageDevice.BeginShowSelector(SaveToDevice, null);
        }

        public static ConfigAndBindings InitiateConfigLoad(string filename = null)
        {
            ConfigAndBindings ret = new ConfigAndBindings();
            Device = null;
            filenameToLoad = CONFIG_NAME + EXT;
            returnType = typeof(ConfigSave);
            saveDataToReturn = null;
            StorageDevice.BeginShowSelector(LoadFromDevice, null);
            ret.config = (ConfigSave)saveDataToReturn; // null if filename or return type was bad
            filenameToLoad = BINDINGS_FULL_NAME;
            returnType = typeof(BindingsSave);
            saveDataToReturn = null;
            StorageDevice.BeginShowSelector(LoadFromDevice, null);
            ret.bindings = (BindingsSave)saveDataToReturn; // null if filename or return type was bad
            return ret;
        }

        public static void InitiateSave(string filename = null)
        {
            Device = null;

            if (filename != null)
                filenameToSave = filename;
            else
            {
                string heroName = RetroGame.getHeroes()[0].prisonerName;
                string heroID = RetroGame.getHeroes()[0].prisonerID.ToString("0000");
                string dateString = DateTime.Now.ToString("yyyy\\ydd\\dMM\\m-HH\\hmm\\mss\\s");
                string suffix = "";
                filenameToSave = heroName + "#" + heroID + "-" + dateString + suffix + EXT;
            }
            LastSaveFilename = filenameToSave;

            HeroSaveState[] heroStates = new HeroSaveState[RetroGame.NUM_PLAYERS];
            for (int i = 0; i < RetroGame.NUM_PLAYERS; i++)
            {
                heroStates[i] = new HeroSaveState(RetroGame.getHeroes()[i]);
            }
            string[] storeTypes = new string[StoreLevel.NUM_RANDOM_POWERUPS];
            for(int i = 0; i < storeTypes.Length; i++)
                storeTypes[i] = StoreLevel.alreadyUsedTypes[i].AssemblyQualifiedName;
            Point farthestHeroLevel = ((StoreScreen)RetroGame.TopLevelManagerScreen).GetFarthestHeroLevel();
            dataToSave = new SaveGame()
            {
                time = DateTime.Now,
                numPlayers = RetroGame.NUM_PLAYERS,
                heroStates = heroStates,
                levelX = farthestHeroLevel.X,
                levelY = farthestHeroLevel.Y,
                cellOffset1 = Level.alphabetOffset1,
                cellOffset2 = Level.alphabetOffset2,
                score = RetroGame.Score,
                AvailableGems = RetroGame.AvailableGems,
                AvailableSand = RetroGame.AvailableSand,
                AvailableBombs = RetroGame.AvailableBombs,
                inventoryState = Inventory.GetState(),
                storePowerupTypeNames = storeTypes,
                healthCost = Powerups.DummyPowerups[typeof(HealthPickup)].GemCost,
                reviveCost = Powerups.DummyPowerups[typeof(RevivePickup)].GemCost,
            };

            StorageDevice.BeginShowSelector(SaveToDevice, null);
        }

        public static SaveGame InitiateLoad(string filename = null)
        {
            Device = null;
            filenameToLoad = filename;
            returnType = typeof(SaveGame);
            saveDataToReturn = null;
            StorageDevice.BeginShowSelector(LoadFromDevice, null);
            return saveDataToReturn as SaveGame; // null if filename or return type was bad
        }

        public static void SaveToDevice(IAsyncResult result)
        {
            Device = StorageDevice.EndShowSelector(result);
            if (Device != null && Device.IsConnected)
            {
                IAsyncResult r = Device.BeginOpenContainer(CONTAINER_NAME, null, null);
                r.AsyncWaitHandle.WaitOne();
                using (StorageContainer container = Device.EndOpenContainer(r))
                {
                    r.AsyncWaitHandle.Close();
                    if(container.FileExists(filenameToSave))
                        container.DeleteFile(filenameToSave);
                    using (Stream stream = container.CreateFile(filenameToSave))
                    {
                        XmlSerializer serializer = null;
                        if (dataToSave.GetType() == typeof(SaveGame))
                            serializer = SAVE_GAME_SERIALIZER;
                        else if (dataToSave.GetType() == typeof(ConfigSave))
                            serializer = CONFIG_SAVE_SERIALIZER;
                        else if (dataToSave.GetType() == typeof(BindingsSave))
                            serializer = BINDINGS_SAVE_SERIALIZER;
                        serializer.Serialize(stream, dataToSave);
                    }
                }
            }
            LastUsedDevice = Device;
        }
        
        public static void LoadFromDevice(IAsyncResult result)
        {
            Device = StorageDevice.EndShowSelector(result);
            IAsyncResult r = Device.BeginOpenContainer(CONTAINER_NAME, null, null);
            r.AsyncWaitHandle.WaitOne();
            using (StorageContainer container = Device.EndOpenContainer(r))
            {
                r.AsyncWaitHandle.Close();
                string filename = (filenameToLoad != null) ? filenameToLoad : LastSaveFilename;
                if (filename != null && container.FileExists(filename))
                {
                    using (Stream stream = container.OpenFile(filename, FileMode.Open))
                    {
                        XmlSerializer serializer = null;
                        if (returnType == typeof(SaveGame))
                            serializer = SAVE_GAME_SERIALIZER;
                        else if (returnType == typeof(ConfigSave))
                            serializer = CONFIG_SAVE_SERIALIZER;
                        else if (returnType == typeof(BindingsSave))
                            serializer = BINDINGS_SAVE_SERIALIZER;
                        saveDataToReturn = serializer.Deserialize(stream);
                        if (returnType == typeof(SaveGame))
                        {
                            ((SaveGame)saveDataToReturn).filename = filename;
                        }
                    }
                }
            }
        }

        public static List<SaveGame> GetAllSaves()
        {
            allSaves = new List<SaveGame>();
            StorageDevice.BeginShowSelector(LoadAllSaves, null);
            return allSaves;
        }

        public static void LoadAllSaves(IAsyncResult result)
        {
            Device = StorageDevice.EndShowSelector(result);
            IAsyncResult r = Device.BeginOpenContainer(CONTAINER_NAME, null, null);
            r.AsyncWaitHandle.WaitOne();
            using (StorageContainer container = Device.EndOpenContainer(r))
            {
                r.AsyncWaitHandle.Close();
                foreach(string filename in container.GetFileNames())
                {
                    using (Stream stream = container.OpenFile(filename, FileMode.Open))
                    {
                        try
                        {
                            SaveGame save = (SaveGame)SAVE_GAME_SERIALIZER.Deserialize(stream);
                            save.filename = filename;
                            allSaves.Add(save);
                        }
                        catch (InvalidOperationException e)
                        {
                            Console.Out.WriteLine("File " + filename + " is not a valid SaveGame file to load");
                        }
                    }
                }
            }
        }

        public static void DeleteLastSave()
        {
            Device = LastUsedDevice;
            if (Device == null || LastSaveFilename == null)
                return;
            IAsyncResult r = Device.BeginOpenContainer(CONTAINER_NAME, null, null);
            r.AsyncWaitHandle.WaitOne();
            using (StorageContainer container = Device.EndOpenContainer(r))
            {
                r.AsyncWaitHandle.Close();
                if (container.FileExists(LastSaveFilename))
                {
                    container.DeleteFile(LastSaveFilename);
                }
            }
        }

        public static void DeleteSave(string filename)
        {
            Device = LastUsedDevice;
            if (Device == null)
                return;
            IAsyncResult r = Device.BeginOpenContainer(CONTAINER_NAME, null, null);
            r.AsyncWaitHandle.WaitOne();
            using (StorageContainer container = Device.EndOpenContainer(r))
            {
                r.AsyncWaitHandle.Close();
                if (container.FileExists(filename))
                {
                    container.DeleteFile(filename);
                }
            }
        }
    }
}
